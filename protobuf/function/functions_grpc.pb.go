// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: functions.proto

package function

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneratorClient is the client API for Generator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneratorClient interface {
	// generator function
	QueryData(ctx context.Context, in *GeneratorRequest, opts ...grpc.CallOption) (*DataSet, error)
	// generator function
	SubscribeData(ctx context.Context, in *GeneratorRequest, opts ...grpc.CallOption) (Generator_SubscribeDataClient, error)
}

type generatorClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneratorClient(cc grpc.ClientConnInterface) GeneratorClient {
	return &generatorClient{cc}
}

func (c *generatorClient) QueryData(ctx context.Context, in *GeneratorRequest, opts ...grpc.CallOption) (*DataSet, error) {
	out := new(DataSet)
	err := c.cc.Invoke(ctx, "/functions.Generator/QueryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorClient) SubscribeData(ctx context.Context, in *GeneratorRequest, opts ...grpc.CallOption) (Generator_SubscribeDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Generator_ServiceDesc.Streams[0], "/functions.Generator/SubscribeData", opts...)
	if err != nil {
		return nil, err
	}
	x := &generatorSubscribeDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Generator_SubscribeDataClient interface {
	Recv() (*DataSet, error)
	grpc.ClientStream
}

type generatorSubscribeDataClient struct {
	grpc.ClientStream
}

func (x *generatorSubscribeDataClient) Recv() (*DataSet, error) {
	m := new(DataSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeneratorServer is the server API for Generator service.
// All implementations must embed UnimplementedGeneratorServer
// for forward compatibility
type GeneratorServer interface {
	// generator function
	QueryData(context.Context, *GeneratorRequest) (*DataSet, error)
	// generator function
	SubscribeData(*GeneratorRequest, Generator_SubscribeDataServer) error
	mustEmbedUnimplementedGeneratorServer()
}

// UnimplementedGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedGeneratorServer struct {
}

func (UnimplementedGeneratorServer) QueryData(context.Context, *GeneratorRequest) (*DataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryData not implemented")
}
func (UnimplementedGeneratorServer) SubscribeData(*GeneratorRequest, Generator_SubscribeDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeData not implemented")
}
func (UnimplementedGeneratorServer) mustEmbedUnimplementedGeneratorServer() {}

// UnsafeGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneratorServer will
// result in compilation errors.
type UnsafeGeneratorServer interface {
	mustEmbedUnimplementedGeneratorServer()
}

func RegisterGeneratorServer(s grpc.ServiceRegistrar, srv GeneratorServer) {
	s.RegisterService(&Generator_ServiceDesc, srv)
}

func _Generator_QueryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).QueryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/functions.Generator/QueryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).QueryData(ctx, req.(*GeneratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generator_SubscribeData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GeneratorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeneratorServer).SubscribeData(m, &generatorSubscribeDataServer{stream})
}

type Generator_SubscribeDataServer interface {
	Send(*DataSet) error
	grpc.ServerStream
}

type generatorSubscribeDataServer struct {
	grpc.ServerStream
}

func (x *generatorSubscribeDataServer) Send(m *DataSet) error {
	return x.ServerStream.SendMsg(m)
}

// Generator_ServiceDesc is the grpc.ServiceDesc for Generator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Generator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "functions.Generator",
	HandlerType: (*GeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryData",
			Handler:    _Generator_QueryData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeData",
			Handler:       _Generator_SubscribeData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "functions.proto",
}

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorClient interface {
	// processor functions
	ProcessDataOnce(ctx context.Context, in *DataSet, opts ...grpc.CallOption) (*DataSet, error)
	// processor functions
	ProcessDataStream(ctx context.Context, opts ...grpc.CallOption) (Processor_ProcessDataStreamClient, error)
}

type processorClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorClient(cc grpc.ClientConnInterface) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) ProcessDataOnce(ctx context.Context, in *DataSet, opts ...grpc.CallOption) (*DataSet, error) {
	out := new(DataSet)
	err := c.cc.Invoke(ctx, "/functions.Processor/ProcessDataOnce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) ProcessDataStream(ctx context.Context, opts ...grpc.CallOption) (Processor_ProcessDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Processor_ServiceDesc.Streams[0], "/functions.Processor/ProcessDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorProcessDataStreamClient{stream}
	return x, nil
}

type Processor_ProcessDataStreamClient interface {
	Send(*DataSet) error
	Recv() (*DataSet, error)
	grpc.ClientStream
}

type processorProcessDataStreamClient struct {
	grpc.ClientStream
}

func (x *processorProcessDataStreamClient) Send(m *DataSet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorProcessDataStreamClient) Recv() (*DataSet, error) {
	m := new(DataSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServer is the server API for Processor service.
// All implementations must embed UnimplementedProcessorServer
// for forward compatibility
type ProcessorServer interface {
	// processor functions
	ProcessDataOnce(context.Context, *DataSet) (*DataSet, error)
	// processor functions
	ProcessDataStream(Processor_ProcessDataStreamServer) error
	mustEmbedUnimplementedProcessorServer()
}

// UnimplementedProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (UnimplementedProcessorServer) ProcessDataOnce(context.Context, *DataSet) (*DataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDataOnce not implemented")
}
func (UnimplementedProcessorServer) ProcessDataStream(Processor_ProcessDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessDataStream not implemented")
}
func (UnimplementedProcessorServer) mustEmbedUnimplementedProcessorServer() {}

// UnsafeProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorServer will
// result in compilation errors.
type UnsafeProcessorServer interface {
	mustEmbedUnimplementedProcessorServer()
}

func RegisterProcessorServer(s grpc.ServiceRegistrar, srv ProcessorServer) {
	s.RegisterService(&Processor_ServiceDesc, srv)
}

func _Processor_ProcessDataOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).ProcessDataOnce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/functions.Processor/ProcessDataOnce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).ProcessDataOnce(ctx, req.(*DataSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_ProcessDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).ProcessDataStream(&processorProcessDataStreamServer{stream})
}

type Processor_ProcessDataStreamServer interface {
	Send(*DataSet) error
	Recv() (*DataSet, error)
	grpc.ServerStream
}

type processorProcessDataStreamServer struct {
	grpc.ServerStream
}

func (x *processorProcessDataStreamServer) Send(m *DataSet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorProcessDataStreamServer) Recv() (*DataSet, error) {
	m := new(DataSet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Processor_ServiceDesc is the grpc.ServiceDesc for Processor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "functions.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessDataOnce",
			Handler:    _Processor_ProcessDataOnce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessDataStream",
			Handler:       _Processor_ProcessDataStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "functions.proto",
}
