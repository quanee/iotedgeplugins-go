syntax = "proto3";

option go_package = "pkg/api/v2/function";

package functions;

// support data types
enum DataType{
    Int8 = 0;
    UInt8 = 1;
    
    Int16 = 2;
    UInt16 = 3;

    Int32 = 4;
    UInt32 = 5;

    Int = 6;
    UInt = 7;

    Int64 = 8;
    UInt64 = 9;

    Float = 10;
    Double = 11;

	String = 12;
    Bytes = 13;

    Bool = 14;
    IntegerBool = 15;

    Datatime = 16;
}

// event level
enum EventLevel {
    Info = 0;
    Error = 1;
    Alarm = 2;
}

// the defination of report event
message Event {
    string DeviceID = 1;
    string DeviceServiceName = 2;
    string DeviceEventName = 3;
    string Value = 4;
    EventLevel EventType = 5;
    int64 Timestamp = 6;
}

// multiple report events
message EventDataSet {
    repeated Event ReportEvents = 1;
}

// dataset is the data running in the ruleengine
// there are three types of dataset, device dataset, audio dataset, image dataset and event dataset
// device dataset contains the device data from devices, such as modbus device, opc device and other devices
// audio dataset contains audio frames
// image dataset contains vedio frames
// event dataset contains events reported from devices
// raw dataset is a byte array
message DataSet {
    oneof DataSet {
        DeviceDataSet deviceDataSet = 1;
        AudioDataSet audioDataSet = 2;
        ImageDataSet imageDataSet = 3;
        EventDataSet eventDataSet = 4;
        bytes rawDataSet = 5;
    }
    int64     timestamp = 6;
    // if ok is equals true, this data set is valid, otherwise, 
    // this data isn't valid and error message is set to filed 'errorMessage'
    bool      ok = 7;
    string    errorMessage = 8;
}

message Properties {
    DataType datatype = 1;
    repeated string properties = 2;
}

message DeviceDataSetItem {
    string deviceID = 1;
    // key can be module.property or single property
    map<string,Properties> properties = 2;
}

message DeviceDataSet {
    repeated DeviceDataSetItem items = 1;
}

message AudioDataSet {
    bytes audio = 1;
    int32 sampleRate = 2;
}

message Image {
    enum ImageFormat {
        RGB888 = 0;
        RGB565 = 1;
        RGB555 = 2;
        YUV420 = 3;
        YUV422 = 4;
        YUV444 = 5;
    }

    ImageFormat format = 1;
    int32 width = 2;
    int32 height = 3;
    bytes data = 4;
}

message ImageDataSet {
    repeated Image image = 1;
}

message ObjectCondition {
    string objectID = 1;
    repeated string property = 2;
    string aggregate = 3;
    string rawSQL = 4;
}

message GeneratorRequest {
    int64 start = 1;
    int64 end = 2;
    int64 interval = 3;
    repeated ObjectCondition objectConditions = 4;
}

service Generator {
    // generator function
    rpc QueryData(GeneratorRequest) returns (DataSet) {}
    // generator function
    rpc SubscribeData(GeneratorRequest) returns (stream DataSet) {}
}

/*
The function plugin is a grpc server and iotedge is the grpc client.
Function plugin can be divided into two types: generator and processor.

1) the generator function is a plugin that can generate data
2) the processor function is a plugin that can process data
*/ 

service Processor {
    // processor functions
    rpc ProcessDataOnce (DataSet) returns (DataSet) {}
    // processor functions
    rpc ProcessDataStream (stream DataSet) returns (stream DataSet) {}
}